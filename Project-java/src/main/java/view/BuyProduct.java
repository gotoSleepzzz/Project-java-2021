/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import control.ManagerController;
import java.text.Collator;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.NYP;
import model.NYPCart;
import service.ManagerService;
import utils.dbUtil;

/**
 *
 * @author DELL
 */
public class BuyProduct extends javax.swing.JFrame {
    

    /**
     * Creates new form BuyProduct
     */
    List<NYP> productItems;
    List<NYPCart> cartItems = new ArrayList<NYPCart>();
    float total = 0;
    private final String[] headerTableProduct = new String[]{
            "Tên sản phẩm","Giá sản phẩm"
    };
    
    private final String[] headerTableCart = new String[]{
            "Tên sản phẩm","Giá sản phẩm", "Số lượng"
    };
    
    private final String[] category = new String[]{
            "Mặc định","< 50.000", "50.000 - 200.000", "200.000 trở lên"
    };
    private String username;
    String[] sortBy = {"Tên sản phẩm","Giá sản phẩm"};
    public BuyProduct(String username) {
        this.username = username;
        
        initComponents();
        sortCombobox.setModel(new DefaultComboBoxModel<String>(sortBy));
        filterCombobox.setModel(new DefaultComboBoxModel<String>(category));
        setLocationRelativeTo(null);
        loadProduct();
        renderTableProduct(productItems);
        renderTableCart(cartItems);
    }
    
    public void loadProduct(){
         productItems = ManagerService.getInstance().findAllNYP();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        muaBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        thanhtoanBtn = new javax.swing.JButton();
        tongtienLabel = new javax.swing.JLabel();
        delBtn = new javax.swing.JButton();
        sortCombobox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        filterCombobox = new javax.swing.JComboBox<>();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchTextField.setText("Nhập tên sản phẩm...");
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Tìm kiếm:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("MUA  NHU YẾU PHẨM");

        searchBtn.setText("Tìm kiếm");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N

        muaBtn.setText("Chọn mua");
        muaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muaBtnActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tên sản phẩm", "Giá sản phẩm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(0).setMinWidth(250);
            productTable.getColumnModel().getColumn(0).setMaxWidth(350);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(muaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addComponent(muaBtn))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Giỏ hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tên sản phẩm", "Số lượng", "Giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cartTable);
        if (cartTable.getColumnModel().getColumnCount() > 0) {
            cartTable.getColumnModel().getColumn(0).setMinWidth(250);
            cartTable.getColumnModel().getColumn(0).setMaxWidth(300);
        }

        thanhtoanBtn.setText("Thanh toán");
        thanhtoanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thanhtoanBtnActionPerformed(evt);
            }
        });

        tongtienLabel.setText("Tổng tiền: 1,000,000 vnđ");

        delBtn.setText("Xóa");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(thanhtoanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(tongtienLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tongtienLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thanhtoanBtn)
                    .addComponent(delBtn)))
        );

        sortCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sortCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortComboboxActionPerformed(evt);
            }
        });

        jLabel4.setText("Sắp xếp theo:");

        jLabel5.setText("Lọc theo:");

        filterCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboboxActionPerformed(evt);
            }
        });

        backBtn.setText("Quay lại");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchBtn))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(sortCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(245, 245, 245))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(backBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(searchBtn)
                    .addComponent(sortCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(filterCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void renderTableProduct(List<NYP> nyps) {
        String[][] data = new String[nyps.size()][2];
        for (int i = 0; i < nyps.size(); i++) {
            data[i][0] = nyps.get(i).getName();
            data[i][1] = String.valueOf(nyps.get(i).getPrice());
        }
        DefaultTableModel model = new DefaultTableModel(data, headerTableProduct);
        productTable.setModel(model);
    }
    public void renderTableCart(List<NYPCart> nyps) {
        String[][] data = new String[nyps.size()][3];
        for (int i = 0; i < nyps.size(); i++) {
            data[i][0] = nyps.get(i).getName();
            data[i][1] = String.valueOf(nyps.get(i).getSoluong());
            data[i][2] = String.valueOf(nyps.get(i).getPrice());
             
        }
        DecimalFormat df = new DecimalFormat("###,###,###");
        tongtienLabel.setText("Tổng tiền: " +df.format(total) +" vnđ");
        DefaultTableModel model = new DefaultTableModel(data, headerTableCart);
        cartTable.setModel(model);
    }
    
    public void addToCart(NYPCart nyp){
        total += nyp.getPrice()*nyp.getSoluong();
        for(int i=0;i<cartItems.size();i++){
            if(cartItems.get(i).getId()== nyp.getId()){
                cartItems.get(i).setSoluong(cartItems.get(i).getSoluong()+nyp.getSoluong());
                renderTableCart(cartItems);
                return;
            }
        }
        cartItems.add(nyp);
        renderTableCart(cartItems);
    }
    
    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String searchString = searchTextField.getText();
        loadProduct();
        if(searchString.equals("Nhập tên sản phẩm...") || searchString.length()<1){
            renderTableProduct(productItems);
        }else {
            List<NYP> result = new ArrayList<>();
                // search list contains name is query with regex local vietnamese
                for (NYP nyp : productItems) {

                    String pattern = nyp.getName();
                    // convert vietnamese pattern string to english with non sign
                    pattern = pattern.replaceAll("[àáạảãâầấậẩẫăằắặẳẵ]", "a");
                    pattern = pattern.replaceAll("[èéẹẻẽêềếệểễ]", "e");
                    pattern = pattern.replaceAll("[ìíịỉĩ]", "i");
                    pattern = pattern.replaceAll("[òóọỏõôồốộổỗơờớợởỡ]", "o");
                    pattern = pattern.replaceAll("[ùúụủũưừứựửữ]", "u");
                    pattern = pattern.replaceAll("[ỳýỵỷỹ]", "y");
                    pattern = pattern.replaceAll("[đ]", "d");
                    pattern = pattern.replaceAll("[ÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴ]", "A");
                    pattern = pattern.replaceAll("[ÈÉẸẺẼÊỀẾỆỂỄ]", "E");
                    pattern = pattern.replaceAll("[ÌÍỊỈĨ]", "I");
                    pattern = pattern.replaceAll("[ÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠ]", "O");
                    pattern = pattern.replaceAll("[ÙÚỤỦŨƯỪỨỰỬỮ]", "U");
                    pattern = pattern.replaceAll("[ỲÝỴỶỸ]", "Y");
                    pattern = pattern.replaceAll("[Đ]", "D");
                    pattern = pattern.toLowerCase(Locale.ROOT);
                    pattern = pattern.replaceAll("\\s+", "");
                    pattern = pattern.replaceAll("\\W", "");

                    searchString = searchString.replaceAll("[àáạảãâầấậẩẫăằắặẳẵ]", "a");
                    searchString = searchString.replaceAll("[èéẹẻẽêềếệểễ]", "e");
                    searchString = searchString.replaceAll("[ìíịỉĩ]", "i");
                    searchString = searchString.replaceAll("[òóọỏõôồốộổỗơờớợởỡ]", "o");
                    searchString = searchString.replaceAll("[ùúụủũưừứựửữ]", "u");
                    searchString = searchString.replaceAll("[ỳýỵỷỹ]", "y");
                    searchString = searchString.replaceAll("[đ]", "d");
                    searchString = searchString.replaceAll("[ÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴ]", "A");
                    searchString = searchString.replaceAll("[ÈÉẸẺẼÊỀẾỆỂỄ]", "E");
                    searchString = searchString.replaceAll("[ÌÍỊỈĨ]", "I");
                    searchString = searchString.replaceAll("[ÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠ]", "O");
                    searchString = searchString.replaceAll("[ÙÚỤỦŨƯỪỨỰỬỮ]", "U");
                    searchString = searchString.replaceAll("[ỲÝỴỶỸ]", "Y");
                    searchString = searchString.replaceAll("[Đ]", "D");
                    searchString = searchString.toLowerCase(Locale.ROOT);
                    searchString = searchString.toLowerCase(Locale.ROOT);
                    searchString = searchString.replaceAll("\\s+", "");
                    searchString = searchString.replaceAll("\\W", "");

                    // if searchString is substring of pattern
                    if (pattern.contains(searchString)) {
                        result.add(nyp);
                    }
                }
                if (result.size() == 0) {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy kết quả");
                } else {
                    productItems = result;
                    renderTableProduct(productItems);
                    }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void sortComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortComboboxActionPerformed
        // TODO add your handling code here:
        Collator collate = Collator.getInstance(new Locale("vi"));
        if(sortCombobox.getSelectedIndex() == 0){
        
            productItems =  productItems.stream().sorted(Comparator.comparing(NYP::getName, collate)).collect(Collectors.toList());
        }else{
            productItems =  productItems.stream().sorted(Comparator.comparing(NYP::getPrice)).collect(Collectors.toList());
        }
        renderTableProduct(productItems);
    }//GEN-LAST:event_sortComboboxActionPerformed

    private void filterComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboboxActionPerformed
        // TODO add your handling code here:
        int choice = filterCombobox.getSelectedIndex();
        if(choice == 0){
            loadProduct();
            renderTableProduct(productItems);
            return;
        }
        List<NYP> temp = new ArrayList<NYP>();
        for(int i = 0;i<productItems.size();i++){
            if(choice == 1){
                if(productItems.get(i).getPrice() < 50000){
                    temp.add(productItems.get(i));
                }
            }else if(choice == 3){
                if(productItems.get(i).getPrice() > 200000){
                    temp.add(productItems.get(i));
                }
            }else{
                if(productItems.get(i).getPrice() <= 200000 && productItems.get(i).getPrice() >= 50000){
                    temp.add(productItems.get(i));
                }
            }
        }
        if(temp.size() == 0){
            JOptionPane.showMessageDialog(null, "Không tìm thấy sản phẩm phù hợp");
        }else{
            productItems = temp;
            renderTableProduct(productItems);
        }
    }//GEN-LAST:event_filterComboboxActionPerformed

    private void muaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muaBtnActionPerformed
        int i = productTable.getSelectedRow();
        
        String soluong = JOptionPane.showInputDialog("Nhập số lượng (số lượng tối đa: "+ " )" );
        int num = Integer.parseInt(soluong);
        addToCart(new NYPCart(productItems.get(i).getId(),productItems.get(i).getName(),num,productItems.get(i).getPrice()));
    }//GEN-LAST:event_muaBtnActionPerformed

    private void thanhtoanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thanhtoanBtnActionPerformed
        // TODO add your handling code here:
        if(total == 0){
            JOptionPane.showMessageDialog(null, "Bạn chưa mua bất kỳ sản phẩm nào!!!");
        }else{
            for(int i=0;i<cartItems.size();i++){
                dbUtil.getDbUtil().excuteProc("call proc_MuaNhuPham (?,?,?)", new Object[] {username,cartItems.get(i).getId(),cartItems.get(i).getSoluong()});
            }
            cartItems.clear();
            total = 0;
            renderTableCart(cartItems);
            JOptionPane.showMessageDialog(null, "Bạn đã thanh toán thành công!!!");
        }
    }//GEN-LAST:event_thanhtoanBtnActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        int i = cartTable.getSelectedRow();
        total -= cartItems.get(i).getPrice() *cartItems.get(i).getSoluong();
        cartItems.remove(i);
        renderTableCart(cartItems);
    }//GEN-LAST:event_delBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        this.dispose();
        
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(BuyProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(BuyProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(BuyProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(BuyProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new BuyProduct().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable cartTable;
    private javax.swing.JButton delBtn;
    private javax.swing.JComboBox<String> filterCombobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton muaBtn;
    private javax.swing.JTable productTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JComboBox<String> sortCombobox;
    private javax.swing.JButton thanhtoanBtn;
    private javax.swing.JLabel tongtienLabel;
    // End of variables declaration//GEN-END:variables
}
